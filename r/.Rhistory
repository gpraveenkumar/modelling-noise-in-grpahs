3^18
3^17
a <- c(2,34,5)
length(a)
mode(a)
a <- c(2,34,5.0)
mode(a)
a <- c('a','v')
mode(a)
str(a)
a <- c(2,34,5.0)
str(a)
x = array(c(1:16),dim=c(2,4,2))
x
x = array(c(1:16),dim=c(2,2,4))
x
x = array(c(1:30),dim=c(3,2,5))
x
x = array(c(1:60),dim=c(3,2,5,2))
x
empl <- list(e='a',s='p',ch=3,ch.age=c(2,3,4))
empl
empl[1]
str(empl[1])
str(empl)
str(empl[[1]])
is.data.frame(empl)
a=1; b=2
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a=2
b=1
f(x)
}
f(x)
g(2)
a=1; b=2
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a<-2
b<-1
f(x)
}
g(2)
a<-1; b<-2
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a<-2
b<-1
f(x)
}
g(2)
a<-1; b<-2
f<-function(x)
{
a*x + b
}
a<-3; b<-2
g<-function(x)
{
a<-2
b<-1
f(x)
}
g(2)
R CMD SHLIB
qnorm(0)
pnorm(0)
pnorm(1.6)
pnorm(1)
pnorm(-1)
pnorm(1.96)
pnorm(Inf)
pnorm(-1)
1-pnorm(1)
1-pnorm(2)
pnorm(-2)
# This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
# Example taken from http://theoreticalecology.wordpress.com/2010/09/17/metropolis-hastings-mcmc-in-r/
# True paramter values
trueA <- 5
trueB <- 0
trueSd <- 10
sampleSize <- 31
## Set the seed so that results can be replicated
set.seed(123)
# create x-values
x <- (-(sampleSize-1)/2):((sampleSize-1)/2)
# create dependent values according to y = ax + b + N(0,sd)
y <-trueA * x + trueB + rnorm(n=sampleSize,mean=0,sd=trueSd)
plot(x,y, main="Test Data")
####### Required fnctions
#likelihood function: Note that it returns "log" likelihood
likelihood <- function(param){
a = param[1]
b = param[2]
sd = param[3]
pred = a*x + b
singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = T)
sumll = sum(singlelikelihoods)
return(sumll)
}
# Example: plot the likelihood profile of the slope a
#slopevalues <- function(x){return(likelihood(c(x, trueB, trueSd)))}
#slopelikelihoods <- lapply(seq(3, 7, by=.05), slopevalues )
#plot (seq(3, 7, by=.05), slopelikelihoods , type="l", xlab = "values of slope parameter a", ylab = "Log likelihood")
# Prior likelihood function: Note that it returns "log" prior likelihood
prior <- function(param){
a = param[1]
b = param[2]
sd = param[3]
aprior = dunif(a, min=0, max=10, log = T)
bprior = dnorm(b, sd = 5, log = T)
sdprior = dunif(sd, min=0, max=30, log = T)
return(aprior+bprior+sdprior)
}
# The posterior
posterior <- function(param){
return (likelihood(param) + prior(param))
}
######## Metropolis algorithm ################
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
## Set starting values: a=4, b=0 and sd=10.
startvalue = c(4,0,10)
## Run the chain
chain = run_metropolis_MCMC(startvalue, 10000)
## Drop the burn-in samplesÂ 
burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
chain
head(chain)
head(head(chain))
hist(chain[-(1:burnIn),1],nclass=50, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
hist(chain[-(1:burnIn),1],nclass=50, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
?hist
3
3
3
hist(chain[-(1:burnIn),1],nclass=30, , main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
summary(lm(y~x))
### Summary: #######################
par(mfrow = c(2,3))
hist(chain[-(1:burnIn),1],nclass=30, main="Posterior of a", xlab="True value = red line" )
abline(v = mean(chain[-(1:burnIn),1]))
abline(v = trueA, col="red" )
hist(chain[-(1:burnIn),2],nclass=30, main="Posterior of b", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),2]))
abline(v = trueB, col="red" )
hist(chain[-(1:burnIn),3],nclass=30, main="Posterior of sd", xlab="True value = red line")
abline(v = mean(chain[-(1:burnIn),3]) )
abline(v = trueSd, col="red" )
plot(chain[-(1:burnIn),1], type = "l", xlab="True value = red line" , main = "Chain values of a", )
abline(h = trueA, col="red" )
plot(chain[-(1:burnIn),2], type = "l", xlab="True value = red line" , main = "Chain values of b", )
abline(h = trueB, col="red" )
plot(chain[-(1:burnIn),3], type = "l", xlab="True value = red line" , main = "Chain values of sd", )
abline(h = trueSd, col="red" )
2^17
2^16
10^13
min(h[i],h[j])
34e10/1e9
l <- list.files("data/")
n <- length(l)
ops <- matrix(c(rep(0,n*6)),nrow=n,ncol=6)
total_a <- c()
total_b <- c()
total_sd <- c()
for(i in 1:1)
{
load(paste("data/",l[i],sep=""))
chain <- chain[-(1:burnIn),]
total_a <- c(total_a,chain[,1])
total_b <- c(total_b,chain[,2])
total_sd <- c(total_sd,chain[,3])
ops[i,1] <- mean(chain[,1])
ops[i,2] <- mean(chain[,2])
ops[i,3] <- mean(chain[,3])
ops[i,4] <- startvalue[1]
ops[i,5] <- startvalue[2]
ops[i,6] <- startvalue[3]
}
m_a <- mean(ops[,1])
sd_a <- sd(ops[,1])
m_b <- mean(ops[,2])
sd_b <- sd(ops[,2])
m_c <- mean(ops[,3])
sd_c <- sd(ops[,3])
plot(ops[,1],ops[,4])
plot(ops[,1],ops[,5])
plot(ops[,2],ops[,4])
plot(ops[,2],ops[,5])
plot(ops[,3],ops[,4])
plot(ops[,3],ops[,5])
total_a_10 <- c()
total_b_10 <- c()
total_sd_10 <- c()
i <- 10
while( i <= 40000*1)
{
total_a_10[i/10] <- total_a[i]
total_b_10[i/10] <- total_b[i]
total_sd_10[i/10] <- total_sd[i]
i <- i + 10
}
airquality
iris
table(iris)
table(iris$Species)
table(iris$Species,iris$Sepal.Length)
ClassLog(iris$Species,iris$Sepal.Length)
?ClassLog
??ClassLog
40 + 15 + 10 + 14.45 + 15 + 5 + 14.99
6.18 + 11.42
17.6 + 17 + 45 + 45 + 63.99 + 50.13 + 3
17.6 + 17 + 45 + 45 + 63.99 + 50.19 + 3
17.6 + 17 + 45 + 45 + 63.99 + 50.19 + 3
6.18 + 11.42
?mode
x = 3
mode(x)
x = T
mode(x)
?sapply
50000/1.1
45000 + 454 + 4500
2500-2344
2500-2244
256/1.5
2040+4000+4000
46000-40000+4500
42000-40000+4000+4000
42000-40000+4000-2500+2000-2500+2000-2500
42000-40000+4000-2500+250+2000-2500+250+2000-2500
42000-40000+4000-2500+250+2000-2500+250
42000-40000+4000-2500+250
42000-40000+4000
42000-40000+4000-5000+500
44000-42500+4250
43000-42500+4250
43250-42500+4250
43250-42034
42034 + 800
42034 + 800 - 42500 + 4250
42034 + 800 - 42500 + 4250 + 2000
42034 + 800 - 42500 + 4250 + 2000 - 5000 + 500
42034 + 800 - 42500 + 4250 + 2000 - 5000 + 500 + 250
42034 + 800 - 42500 + 4250 + 2000 - 5000 + 500 + 500
42034 + 800 - 42500 + 4250 + 2000 - 5000 + 500 + 500 - 2500 + 250
500 + 1100 + 1500 - 1500
500 + 1100 - 1500
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1)
sample(6,1000)
sample(6,1000,replace=T)
whichToSwap <- sample(6-1,1)
i <- 1
while(i < noofIterations/swapInterval)
t <- mpi.recv.Robj(0,0);
noofIterations <- 5000
swapInterval <- 3
mpi.bcast.cmd(temper(noofIterations,0.005,swapInterval)
mpi.bcast.cmd(temper(noofIterations,0.005,swapInterval))
install.packages("Rmpi")
library(Rmpi)
rank=mpi.comm.rank();
library(Rmpi)
library(Rmpi)
library(Rmpi)
library(Rmpi)
library(Rmpi)
install.packages("Rmpi")
library(Rmpi)
library(Rmpi)
install.packages("Rmpi")
library(Rmpi)
mc <- load('mcmc.rda')
mc <- load('mcmc.rda')
mc <- load('mcmc.rda')
k <- 20
idxOfCols <- sample(1:m, k)
x <- rnorm(k)
n <- 5000
m <- 1e5
k <- 20
idxOfCols <- sample(1:m, k)
x <- rnorm(k)
x
a <- matrix(100,100)
a
a <- matrix(0,100,100)
a
a[5,5] <x
a[5,5] <- x
a <- matrix(0,100,100,sparse=T)
library(Matrix)
a <- matrix(0,100,100,sparse=T)
a1 <- Matrix(0,5000,100000,sparse=T)
a1[5,5] <- x
a1 <- Matrix(0,5000,100000,sparse=T)
for(i in 1:n) {
a1[i,idxOfCols] <- x
}
library(Matrix)
n <- 5000
m <- 1e5
k <- 20
idxOfCols <- sample(1:m, k)
x <- rnorm(k)
a2 <- sparseMatrix(
i=rep(1:n, each=k),
j=rep(idxOfCols, n),
x=rep(x, k),
dims=c(n,m)
)
# Compare
a1 <- Matrix(0,5000,100000,sparse=T)
for(i in 1:n) {
a1[i,idxOfCols] <- x
}
sum(a1 - a2) # 0
a1[,54188]
a1[,54189]
a1[,44436]
idxOfCols
x = matrix(c( 0,45,56,
34,65,31,
12,23,43), nrow=3, byrow=TRUE)
N= sparseMatrix(i=x[,1], j=x[,2], x=x[,3])
x = matrix(c( 1,45,56,
34,65,31,
12,23,43), nrow=3, byrow=TRUE)
N= sparseMatrix(i=x[,1], j=x[,2], x=x[,3])
N
x = matrix(c( 1,4,56,
3,6,31,
2,2,43), nrow=3, byrow=TRUE)
N= sparseMatrix(i=x[,1], j=x[,2], x=x[,3])
library(Matrix)
N= sparseMatrix(i=x[,1], j=x[,2], x=x[,3])
N
N= sparseMatrix(i=x[,1], j=x[,2], x=i)
N= sparseMatrix(i=x[,1], j=x[,2], x=1)
N
svd(N)
x = matrix(c( 1,4,56,
3,60,31,
22,2,43), nrow=3, byrow=TRUE)
N= sparseMatrix(i=x[,1], j=x[,2], x=1)
N
svd(N)
install.packages("rattle", repos="http://rattle.togaware.com", type="source")
install.packages("eigenmodel")
?readfile
?read
??readTable
?read.file
getwd()
swtwd("N:\jen\noise")
swtwd("N:/jen/noise")
s2twd("N:/jen/noise")
setwd("N:/jen/noise")
getwd()
setwd("N:/jen/noise/r")
data <- read.table(file = '../34-feature1.txt')
data <- read.table(file = '../data/34-feature1.txt')
library(ggplot2)
qplot(data$1)
data$1
data
data
qplot(data)
hist(data)
hist(c(1,2,1,3))
type(data)
typeof(data)
data <- read.table(file = '../data/34-feature1.txt')
typeof(data)
data[1]
data[1,1]
data[1,2]
data[1,3]
data$1
data$ratings
data <- read.table(file = '../data/34-feature1.txt', header = T)
typeof(data)
data$ratings
qplot(data$ratings)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=.5)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=1)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5)
sum(data$rating < 1)
sum(data$rating > 1)
sum(data$rating >= 1)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
setwd("N:/jen/noise/r")
library(ggplot2)
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/34-feature1.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/34-feature3.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
typeof(data)
data[1]
data[1,1]
data <- read.table(file = '../data/74-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/74-feature1.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/74-feature3.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/74-feature3.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
data <- read.table(file = '../data/74-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
sum(data$rating >= 7)
sum(data$rating >= 7)
data$rating >= 7
data[data$rating >= 7]
data[data$rating >= 7,1]
data[data$rating >= 7,2]
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
sum(data$rating >= 7)
data[data$rating >= 7,1]
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
sum(data$rating >= 7)
count(data$rating)
table(data$rating)
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
table(data$rating)
val <- 1
sum(data$rating < val)
sum(data$rating >= val)
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
ggsave(file="plots/34-feature2.png")
png
?png
png(filename="plots/34-feature2.png")
ggsave(file="plots/34-feature2.png")
dev.off()
ggsave(file="plots/34-feature2.png")
dev.off()
png(filename="plots/34-feature2.png")
dev.off()
png(filename="plots/34-feature2.png")
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
dev.off()
png(filename="34-feature2.png")
data <- read.table(file = '../data/34-feature2.txt', header = T)
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
ggsave(file="34-feature2.png")
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
dev.on()
ggplot(data, aes(x=ratings)) + geom_histogram(binwidth=0.5) + theme_bw()
